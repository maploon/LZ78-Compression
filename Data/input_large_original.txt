Midterm Thurs. open book, 1 sheet of notes.
o Quicksort          
o Quickselect
o midterm review

DIVIDE AND CONQUER:
          if base-case, solve in simple way.
          Otherwise, split into pieces (usually two) about same size
          Recursively solve pieces
          Combine solutions of pieces into soln for orig problem. 

Last time: MERGESORT

1. split into left, right halves.                 2 5 3 9    7 10 6 4
2. recursively sort each half.                    2 3 5 9    4 6 7 10
3. merge 2 sorted halves into sorted sequence.   /\         /\

1. O(1) time, 2: 2*T(n/2) time, 3: Theta(n) time.

Recurrence:  Say T(n) = worst-case time on input of size n.

T(n) = cn + 2T(n/2).

Solve to get Theta(n log n).


Advantages of Mergesort: O(n log n) even in worst case.  Conceptually 
simple, though C code more complicated that some others.

Disadvantages: Omega(n log n) even in best case.
      Constant not as good on average as others like quicksort.

--------------------------

QUICKSORT:
Quicksort is another divide and conquer based algorithm.  Main effort
is before recursion, rather than after.

      3 10 3 2 5 4 1 6

(1) Pick some "partition" or "pivot" number.  (Eg, first one ) 
(2) Split remainder into 2 piles: LESS-OR-EQUAL, GREATER, and put
partition between them:  3 2 1    3    10 5 4 6

(3) Sort piles
(4) output concatenation (don't need to merge).

E.g.,....

1 is O(1).
2 is Theta(n): make one pass through.  [look at fast way in a moment]
3: if k on left and n-k-1 on right, get: T(k) + T(n-k-1)
4 is O(1).
Problem is two sets might not be same size.  

BEST CASE: split 50/50, then 3 is 2T(n/2).
  --> get T(n) = cn + 2T(n/2) = Theta(n log n) just like mergesort.

WORST CASE: partition elt is smallest (or largest) so one pile has n-1
elements.  (why don't you put the partition into the LESS_OR_EQUAL bucket?)

Recurrence: 
T(n) = c*n + T(n-1).  n > 1
T(1) = 1.

--> Theta(n^2).

E.g., if already sorted or in reverse order you get the worst case.

AVERAGE CASE: Theta(n log n), but analysis is messy (see book).
Intuition: even if don't split 50/50, if in random order then split is
usually pretty good. In fact, can be implemented with very small
constant.  That's why it's called "quicksort"

ISSUES: 
 How to select partition element?  Want method that's fast and
 easy, and also hope to split so both sides are large.
  -- might use 1st element.
  -- might pick 1st, middle, last, and use median.  E.g., 3, 2, 6 ->
				use 3.
  -- might pick one AT RANDOM...  (why?)

How do you split into piles?


Here's one nice way if elements in array:  Say partition on leftmost.

Start with one finger on left, one finger at right.  Move left ptr
until get to number that should be on right side. Move right ptr until
get to number that should be on left side.  Then, swap them.  Keep
going until ptrs have crossed.  Then, can put partition elt in there.


       Eg: 3 |  2 10 11 1 5 2 4 3 6  
           --+    /\           /\

--> swap 10,3
--> swap 11,2
--> when cross, right ptr is on 1, so swap 1 and 3.

void quicksort(int arr[], int n)  // partition based on arr[0]
{
  if (n <= 2) {                   // handle base case
    if (n == 2 && arr[0] > arr[1]) 
      {int temp = arr[0]; arr[0] = arr[1]; arr[1] = temp;}
    return;
  }
  
  int l=1, r = n-1, pivot = arr[0];  // do this after checking that n>0
  while(l < r) {
    while(l < n && arr[l] <= pivot) ++l;
    while(r > 0 && arr[r] > pivot) --r;
    if (l < r) {int temp = arr[r]; arr[r] = arr[l]; arr[l] = temp;}
  }
  arr[0] = arr[r]; arr[r] = pivot;
  quicksort(arr, r);
  quicksort(arr + r + 1, n-r-1);
}


Another way to look at quicksort: Say partitioning based on 1st element, and 
when we split, we keep numbers in same order as they were.

 numbers 3 1 0 2 5 4 3 6.
Split on 3, get:                   3
                         1 0 2 3        5 4 6
again split on 1st element:
                                   3
                              1           5
                           0    2,3     4   6
                            

--> just like inserting into Binary Search Tree, but you're doing it
in a different order.

--------------------------
Another problem. Say you don't need to sort, just want to find largest.       
How? and how much time?

What if want to find 3rd largest?
What if you want to find 17th largest?
What if wanted to find median? 

Could sort and get middle. Or,...

QUICKSELECT:
Goal is to find the kth smallest (k = 1,2,...,n)


QUICKSELECT(int arr[], int len, int k)
-> pick some element (say first one)
-> split into LESS, EQUAL, GREATER piles, of lengths l1, l2, len-(l1+l2)

(Say array now looks like this:   <--- l1 ---><-- l2 --><-- len-(l1+l2) -->  )

-> if k <= l1, where is the thing we're looking for?
---> recurse on arr, l1, k

  otherwise, if k <= l1 + l2, then what?
---> output partition element.

  otherwise, then what?
---> recurse on GREATER pile arr+(l1+l2), l3, k - l1 - l2.

Idea: split into pieces, takes n work to do it, but then only recurse
on one piece. If lucky, split in half.

IF each time we split exactly in half, get recurrence:
T(n) = n + T(n/2).  -> what's solution?  O(n).

Linear time: O(n) time on average.
Informal Argument:  Let's say we're unlucky and the thing we're
looking for is always in the bigger piece.
What is the average size of the bigger piece, if we split at random?

Imagine I have a candy bar, I split it at random, and keep the
bigger piece: what is the expected size of the bigger piece?

---> 3n/4. Reason: Could be n/2, n/2+1, ..., n: all equally likely.

So, even if always recurse on bigger piece, still on average get to
throw out 1/4.

So, intuitively, cost is at most:  n + n*(3/4) + n*(3/4)^2 + ...,
which is a geometric series -> n*(1/(1 - 3/4)) = 4n.

--------------------------------------------

MIDTERM TOPICS:

C/C++: pointers, structures, memory issues, classes
QUEUEs and STACKs: uses and implementation (linked list, arrays)
TREES: traversing, basic facts.
ALG techniques:
  Recursion, memoizing, Dynamic Programming, Divide and conquer
Order notation and analyzing running times.  Simple recurrences
Sorting.

Good luck!
